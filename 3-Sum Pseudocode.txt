3-Sum

If(!sorted)
	mergeSort(array[])
for(i=0; i < arraySize; i++)
	left=i + 1; right=arraySize-1.
	while(left < right)
		if(array[i] + array[left] + array[right] == target)
			return array[i], array[left], array[right]
		elseif (array[i] + array[left] + array[right < target) left++
		else(array[i] + array[left] + array[right] > target) right--	
	return -1

This algorithm takes in a sorted array of integers and iterates through it 
with a for loop that uses its counter as the minimum index of the array. 
It then works its way up the array adding together the i element, the number
next to the i element, and the max to find the target sum.
There are two nested loops that search the array looking for a target sum.
Thus, the algorithm runs in O(n^2) time. It is possible to use a hashmap.
However, the time complexity would remain O(n^2).

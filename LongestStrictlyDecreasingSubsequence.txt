Longest strictly decreasing contiguous subsequence
i = 0; result[]; 
while(i < arraySize)
	if(i = 0)    result[i] = 1; count = 1;
	else
		if(array[i] < (array[i] – 1))
			if(result[i-1] < count)  
result[i] = result[i – 1]
			else
result[i]  = result[i-1]+1
			count++
		else
			result[i] = result[i – 1]
			count = 1
	i++
return result
This algorithm takes in an array of integers that will look searched
through to find the longest strictly decreasing contiguous subsequence.
There is a resulting array where the length of the longest sequence to
that point will be stored. There is a counter that keeps track of the
length of current decreasing sequence and is used to determine if the
current sequence is longer than the longest sequence. If so, the length 
of the longest sequence will be updated. The array is only iterated 
through one time and the algorithm runs in O(n) time.
